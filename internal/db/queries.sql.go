// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, age, gender, email, password_hash 
FROM users 
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Gender,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :exec
SELECT id, name, age, gender, email FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, getUserById, id)
	return err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, age, gender, email FROM users
`

type GetUsersRow struct {
	ID     int32
	Name   string
	Age    int32
	Gender string
	Email  string
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.Gender,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertGeneration = `-- name: InsertGeneration :one
INSERT INTO user_generation (user_id, generation, grade)
VALUES ($1, $2, $3)
RETURNING id
`

type InsertGenerationParams struct {
	UserID     int32
	Generation string
	Grade      string
}

func (q *Queries) InsertGeneration(ctx context.Context, arg InsertGenerationParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertGeneration, arg.UserID, arg.Generation, arg.Grade)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (name, age, gender, email) 
VALUES ($1, $2, $3, $4)
RETURNING id
`

type InsertUserParams struct {
	Name   string
	Age    int32
	Gender string
	Email  string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Name,
		arg.Age,
		arg.Gender,
		arg.Email,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET name = $2, age = $3, gender = $4, email = $5 
WHERE id = $1
`

type UpdateUserParams struct {
	ID     int32
	Name   string
	Age    int32
	Gender string
	Email  string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Age,
		arg.Gender,
		arg.Email,
	)
	return err
}
